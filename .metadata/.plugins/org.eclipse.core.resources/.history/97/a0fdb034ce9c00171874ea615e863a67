package QUESTION_3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


public class separate{
	
	public static List<Integer> output = new ArrayList<Integer>();
	public static List<Integer> copy ;
	public static List<List<Integer>> output2 = new ArrayList<List<Integer>>();
	
	
	public static void main(String[] args){
		List<Integer> arr = new ArrayList<Integer>();
		arr.add(2);
		arr.add(1);
		arr.add(4);
		arr.add(5);	
		arr.add(6);	
		arr.add(3);
		
		int K = 3;
	
		if (sep(arr, K))
			System.out.println("TRUE.\n");
		else
			System.out.println("FALSE.\n");
	}

	public static boolean sep(List<Integer> list, int k){
		
		
		//size of array
		int len = list.size();
		//if size of array is 0 return false
		if (len == 0) return false;
		//if size of array is the same with k return true
		if (len == k) return true;
		//if size of array smaller than k return false
		if (len < k) return false;
		//if the average of the elements in the array is not divisible with k, return false
		int s = sum(list);
		


		if (s % k != 0) return false;
		
		int bucketSize = s / k;
		
		//sort array list 
		Collections.sort(list);
		
		for(int i = 1; i <= k ; i++){
			//clear output2
			output2 = new ArrayList<List<Integer>>();
			
			//get all combinations possible from the given list
			combine(0,list);
			list.remove(list.size()-1);
			System.out.println("HAHA "+(output2.size()+1)+ output2 );

			//1- get the specific combination combination
			
			
			//2- remove from list the chosen values
			//3- if i=k and list still has values, return false
		}

		return true;
		
		
	}

	public static int sum(List<Integer> list){
		int sum = 0;
		for (int i = 0 ; i<list.size(); i++){
			sum = sum + list.get(i);
		}
		return sum;
	}

	
	public static void combine(int start , List<Integer> list ){
		for( int i = start; i < list.size(); ++i ){
			output.add( list.get(i) );
			copy = new ArrayList<Integer>(output);
			output2.add(copy);
			//System.out.println( output );
			if ( i < list.size()) combine( i + 1, list);
			
			output.remove(output.size()-1);
		}
	} 
}
